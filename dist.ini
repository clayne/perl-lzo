name    = Compress-LZO
author  = Markus Franz Xaver Johannes Oberhumer <markus@oberhumer.com>
license = GPL_2
copyright_holder = Markus Franz Xaver Johannes Oberhumer
copyright_year   = 1996, 1997, 1998, 1999, 2000, 2001, 2002

[AutoVersion]
major = 1
format = {{ $major }}.09
;format = {{ $major }}.{{ cldr('yyDDD') }}

; -- fetch & generate files
[GatherDir]
[MetaTests]
[PodCoverageTests]
[PodSyntaxTests]
[KwaliteeTests]
[Test::Portability]
[Test::Synopsis]
;[MinimumVersionTests]
[HasVersionTests]
[Test::DistManifest]
[Test::UnusedVars]
[Test::NoTabs]
[EOLTests]
[ReportVersions]
[InlineFilesMARCEL]

; -- remove some files
[PruneCruft]
[PruneFiles]
filenames = dist.ini

[ManifestSkip]

; -- get prereqs
[AutoPrereqs]
skip = ^(English|Carp|Config|File::Find)$

; -- gather metadata
[AutoMetaResources]
repository.github = user:pepl
bugtracker.github = user:pepl
homepage          = http://metacpan.org/release/%{dist}

; overrides [Repository] if repository is on github
;[GithubMeta]
;remote = origin     ; better than [Repository]; sets homepage, too

; -- munge files
[ExtraTests]
[PkgVersion]
[CopyReadmeFromBuild]
[PodWeaver]

; -- dynamic meta-information
[ExecDir]
[ShareDir]
[MetaProvides::Package]

; -- generate meta files
[License]
[MetaYAML]
[MetaJSON]
[ReadmeAnyFromPod / ReadmePodInRoot]
type = markdown
filename = README.md
location = build
[CopyFilesFromBuild]
copy = README.md
[InstallGuide]
[Signature]
[Manifest] ; should come last

; -- release
[CheckChangeLog]
; before release
[Git::Check]        ; ensure all files checked in
[CheckPrereqsIndexed]    ; ensure prereqs are on CPAN
[CheckChangesHasContent] ; ensure Changes has been updated
[TestRelease]       ; ensure t/ tests pass
[ConfirmRelease]    ; prompt before uploading

; releaser
[UploadToCPAN]      ; uploads to CPAN

; after release
[Git::Commit / Commit_Dirty_Files] ; commit Changes (as released)

[Git::Tag]          ; tag repo with custom tag
tag_format = release-%v

; NextRelease acts *during* pre-release to write $VERSION and
; timestamp to Changes and  *after* release to add a new {{$NEXT}}
; section, so to act at the right time after release, it must actually
; come after Commit_Dirty_Files but before Commit_Changes in the
; dist.ini.  It will still act during pre-release as usual

[NextRelease]

[Git::Commit / Commit_Changes] ; commit Changes (for new dev)

[Git::Push]         ; push repo to remote
push_to = origin

[MakeMaker::Awesome]
WriteMakefile_arg = LIBS => [ '-llzo2' ]

[CheckLib]
lib = lzo2
header = lzo/lzoconf.h
header = lzo/lzo1x.h


